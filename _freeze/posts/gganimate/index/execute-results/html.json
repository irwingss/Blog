{
  "hash": "c29a8a22e9f4e1832eed677872e76754",
  "result": {
    "markdown": "---\ntitle: \"Gráficos animados con gganimate\"\nauthor: \"Irwing S. Saldaña\"\ndate: \"2022-03-18\"\ncategories: [ggplot2, dataviz, R]\nimage: \"img/portada.png\"\n---\n\n\nInstalar librerías nuevas\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"devtools\")\ndevtools::install_github(\"thomasp85/gganimate\")\ninstall.packages(\"magick\")\ninstall.packages(\"patchwork\")\ninstall.packages(\"rstantools\")\ninstall.packages(\"gifski\")\ninstall.packages(\"gapminder\")\n```\n:::\n\n\nLibrerías a usar\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(gganimate)\nlibrary(magick)\nlibrary(gapminder)\nlibrary(patchwork)\n```\n:::\n\n\n# 1. Gráficos animados con gganimate\n\nEs básicamente la misma estructura de código que un gráfico de **ggplot2** cualquiera, al cual se le suma una función de **gganimate**. Nota cómo aquí al gráfico se le adiciona la función `transition_time()` especificando la columna de cambio temporal `year`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creemos un gráfico estático\nGrafico <- gapminder %>% filter(continent==\"Americas\") %>% \n  ggplot(aes(gdpPercap, lifeExp, label=country, colour=country)) +\n  geom_label(alpha=0.7)+\n  scale_x_log10() +\n  scale_size(range = c(3, 15))+\n  theme_minimal()+\n  theme(legend.position=\"none\")\n\n# Creemos un gráfico animado\nGrafico <- Grafico +\n  labs(title=\"Year: {frame_time}\", \n       x=\"PBI Per Capita\", y=\"Expectativa de Vida\")+\n  transition_time(year)\nGrafico\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.gif)\n:::\n:::\n\n\n## 1.1. Transiciones temporales en gráficos de dispersión de puntos\n\nUna sintaxis especial del código de **gganimate** para las etiquetas temporales es utilizar dentro del título el código `{frame_time}` que importa la categoría temporal a la que corresponde cada cuadro del GIF animado y lo imprime en la etiqueta. Es clásico colocar esto en el título.\n\nEn esta sección verás el uso de más funciones - `view_follow(fixed_y = TRUE)` - `shadow_wake(wake_length = 0.1, alpha = FALSE)` - `shadow_mark(alpha = 0.3, size = 0.5)`\n\nQue le dan un toque distintivo a cada gráfico.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creemos un gráfico estático\nlibrary(gapminder)\np <- gapminder %>% \n  ggplot(aes(x = gdpPercap, y=lifeExp, \n             size = pop, colour = country)) +\n  geom_point(show.legend = FALSE, alpha = 0.7) +\n  labs(x = \"GDP\", y = \"Life expectancy\")+\n  scale_color_viridis_d() +\n  scale_size(range = c(2, 12)) +\n  scale_x_log10()\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transición por variable year\np + transition_time(year) +\n  labs(title = \"Year: {frame_time}\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.gif)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transición por variable year y con faceta por continent\np + facet_wrap(~continent) +\n  transition_time(year) +\n  labs(title = \"Year: {frame_time}\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.gif)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transición por variable year y seguimiento activo de los datos\np + transition_time(year) +\n  labs(title = \"Year: {frame_time}\") +\n  view_follow(fixed_y = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.gif)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transición por variable year y movimiento con sombras móviles\np + transition_time(year) +\n  labs(title = \"Year: {frame_time}\") +\n  shadow_wake(wake_length = 0.1, alpha = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.gif)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transición por variable year y movimiento con sombras fijas\np + transition_time(year) +\n  labs(title = \"Year: {frame_time}\") +\n  shadow_mark(alpha = 0.3, size = 0.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.gif)\n:::\n:::\n\n\n## 1.2. Transiciones temporales en gráficos de líneas\n\nLa transición de líneas se aplica con `transition_reveal()` especificando la variable que aparezca en el eje X para realizar el revelado. En este caso, el eje X es la variable `Day`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creemos un gráfico de lineas simple\nZ <- airquality %>% \n  mutate(Month = factor(Month, labels=c(\"5\"=\"Mayo\",\"6\"=\"Junio\",\"7\"=\"Julio\",\n                                        \"8\"=\"Agosto\",\"9\"=\"Setiembre\"))) %>%   ggplot(aes(x=Day, y=Temp, color=Month))+ \n  geom_line() +\n  labs(x = \"Día del mes\", y = \"Temperatura\") +\n  theme_bw()+\n  theme(legend.position = \"top\")\nZ\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transición de las líneas con revelado en base al eje x\nZ + transition_reveal(Day)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.gif)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transición de las líneas guiadas por punto, \n# con revelado en base al eje x\nZ + \n  geom_point() +\n  transition_reveal(Day)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.gif)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transición de las líneas y punto, \n# con revelado en base al eje x\nZ + \n  geom_point(aes(group = seq_along(Day))) +\n  transition_reveal(Day)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.gif)\n:::\n:::\n\n\n## 1.3. Exportando GIFs animados en alta calidad\n\nSe recomienda ir probando la resolución (argumento `res`) de `animate()`. Valores superiores a 150 píxeles por pulgada suelen demorar demasiado.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Se debe guardar el gráfico animado final en un objeto\nFinal <- Z + transition_reveal(Day)\n\n# Generemos la animación\nanimate(Final, renderer=magick_renderer(),\n        width = 20, height = 20, units=\"cm\", res=150)\n\n# Exportemos la animación activa en el Visualizador (Panel Viewer)\nanim_save(\"mi animacion lines.gif\")\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}